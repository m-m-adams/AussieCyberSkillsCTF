# given
import struct
import binascii
import gmpy
p = 12734388423027263805838082500461676978623655379040968520546499300029960167301383167850280748975051651068956429007977575788319730260224838735906264562353439
n = 157702448005359477880276703881417542766532271253898875144862237295534389932645745440321314344155006452901850061218324448819794756811585710920483305991839897576379274096843671700056818985381443851522309502756962982643477863379848745589903319467057931521291676300705108088925310179888766286840665670847263918883
dp = 1629060793475490480491257822431675546655352945988236510811909662431004199718969287583651914413083490683498510457797851859478614033704655589108492682438851
dq = 12227193374836295874914734134031856482048035132747011764775087199614504058144119398173840633051109632277020599101180303368183175685607695352733721054594185
ciphertext = 2772489103574256916589355598352984637133379420683868695844414660224066164318649503538506201722675335765654507693505334172444759158147405197592907812468946259847512311022873479280679452528934139985201980872078942452333918885852846723140468867419436995385882106451105552819843322739530018360135415554236743751

# derived
q = n//p

# we have dp and dq so it's chinese remainder algo to calculate the plaintext
# this is the normal way to decrypt RSA, not really a challenge


def main():
    p = 12734388423027263805838082500461676978623655379040968520546499300029960167301383167850280748975051651068956429007977575788319730260224838735906264562353439
    n = 157702448005359477880276703881417542766532271253898875144862237295534389932645745440321314344155006452901850061218324448819794756811585710920483305991839897576379274096843671700056818985381443851522309502756962982643477863379848745589903319467057931521291676300705108088925310179888766286840665670847263918883
    dp = 1629060793475490480491257822431675546655352945988236510811909662431004199718969287583651914413083490683498510457797851859478614033704655589108492682438851
    dq = 12227193374836295874914734134031856482048035132747011764775087199614504058144119398173840633051109632277020599101180303368183175685607695352733721054594185
    c = 2772489103574256916589355598352984637133379420683868695844414660224066164318649503538506201722675335765654507693505334172444759158147405197592907812468946259847512311022873479280679452528934139985201980872078942452333918885852846723140468867419436995385882106451105552819843322739530018360135415554236743751

    # derived
    q = 12383982863298738204036450420319386406456344897208429324304778703518027931860767965960751245832467424825926372335499256792054831897195091136923192334652797

    Qinv = gmpy.invert(q, p)
    print("Qinv: " + str(Qinv))

    m1 = pow(c, dp, p)

    m2 = pow(c, dq, q)

    h = (Qinv * (m1 - m2)) % p

    m = m2 + (h*q)

    hexadecimals = str(hex(m))[2:]
    print(hexadecimals)
    print("solved: " + str(binascii.unhexlify(hexadecimals)))


if __name__ == "__main__":
    main()
